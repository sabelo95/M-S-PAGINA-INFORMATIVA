# Pipeline Build completo con Gradle, SonarQube y Seguridad
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
# 1. Preparar análisis de SonarQube
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'YourSonarServiceConnection'
    scannerMode: 'Other'
    extraProperties: |
      sonar.projectKey=your_project_key
      sonar.projectName=your_project_name

# 2. Compilar con Gradle
- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'

# 3. Publicar resultados de pruebas
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/TEST-*.xml'
    testRunTitle: 'JUnit Results'

# 4. Analizar código con SonarQube
- task: SonarQubeAnalyze@5

# 5. Romper Quality Gate si falla
- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'

# 6. Copiar artefacto JAR
- script: |
    mkdir -p $(Build.ArtifactStagingDirectory)/jar
    cp build/libs/*.jar $(Build.ArtifactStagingDirectory)/jar/
  displayName: 'Copy JAR'

# 7. Comprimir artefactos
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/jar'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/build-$(Build.BuildId).zip'
    replaceExistingArchive: true

# 8. Publicar artefactos
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'drop'

# 9. Escaneo de seguridad (opcional)
- script: |
    echo "Running security analysis..."
    # Aquí podrías usar herramientas como OWASP Dependency Check o Trivy
  displayName: 'Run Security'
